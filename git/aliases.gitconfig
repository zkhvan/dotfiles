[alias]
	a           = add

	b           = branch
	be          = branch --edit-description
	done        = branch --verbose --merged
	um          = branch --verbose --no-merged

	co          = checkout
	cb          = checkout -b

	cp          = cherry-pick

	ci          = commit
	ca          = commit --amend --no-edit
	cm          = commit --edit -m

	lasttag     = describe --tags --abbrev=0

	d           = diff
	ds          = diff --staged
	dino        = diff --name-only
	dns         = diff --ignore-all-space

	fo          = fetch origin
	fom         = fetch origin master
	fop 		= fetch origin --prune

	git         = !exec git
	g           = grep --break --heading --line-number

	ir          = update-index --assume-unchanged
	ia          = update-index --no-assume-unchanged

	l           = log --abbrev-commit --date=short --pretty=ld
	ll          = log --abbrev-commit --oneline --decorate --all
	lm          = l --author="Zhenya Khvan"
	lga         = l --graph --all
	lg          = l --graph
	lb          = log --abbrev-commit --oneline --decorate --all --graph
	lbg         = log --abbrev-commit           --decorate --all --graph
	new         = lg        @{u}..
	news        = lg --stat	@{u}..

	m           = merge

	pom         = pull --ff-only origin master
	pullall     = "!f() { git pull \"$@\" && git submodule update --init --recursive; }; f"
	pure        = pull --rebase
	pum         = pull --ff-only upstream master

	pf          = push --force-with-lease
	poh         = push -u origin HEAD
	puh         = push upstream HEAD

	rb          = rebase
	rbc         = rebase --continue

	unstage     = reset HEAD
	uncommit    = reset HEAD^

	forget      = rm -r --cached

	last        = show --show-signature

	st          = status
	s           = status --short --branch

	squashwip   = rebase -i @{u}

	subup       = submodule update --init

	t           = tag

	track       = branch -u

	wip         = "!f() { git add -A . && git commit -nm \"WIP\" \"$@\"; }; f"

	reword      = "!f() { GIT_SEQUENCE_EDITOR='sed -i -e 1s/^pick/reword/' git rebase -i \"$@\"^; }; f"
	edit        = "!f() { GIT_SEQUENCE_EDITOR='sed -i -e 1s/^pick/edit/' git rebase -i \"$@\"^; }; f"
	dsf         = "!f() { [ -z \"$GIT_PREFIX\" ] || cd -- \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"

	diff-check-indent-tab   = "git -c core.whitespace=indent-with-non-tab diff --check"
	diff-check-indent-space = "git -c core.whitespace=tab-in-indent diff --check"
